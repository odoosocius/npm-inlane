/*
 * InLane API
 * InLane communication Web Api
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InLaneApi);
  }
}(this, function(expect, InLaneApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ErrorCode', function() {
      beforeEach(function() {
        instance = InLaneApi.ErrorCode;
      });

      it('should create an instance of ErrorCode', function() {
        // TODO: update the code to test ErrorCode
        expect(instance).to.be.a('object');
      });

      it('should have the property genericError', function() {
        expect(instance).to.have.property('genericError');
        expect(instance.genericError).to.be("genericError");
      });

      it('should have the property noError', function() {
        expect(instance).to.have.property('noError');
        expect(instance.noError).to.be("noError");
      });

      it('should have the property busy', function() {
        expect(instance).to.have.property('busy');
        expect(instance.busy).to.be("busy");
      });

      it('should have the property userMandatory', function() {
        expect(instance).to.have.property('userMandatory');
        expect(instance.userMandatory).to.be("userMandatory");
      });

      it('should have the property commandFailed', function() {
        expect(instance).to.have.property('commandFailed');
        expect(instance.commandFailed).to.be("commandFailed");
      });

      it('should have the property machineNotReady', function() {
        expect(instance).to.have.property('machineNotReady');
        expect(instance.machineNotReady).to.be("machineNotReady");
      });

      it('should have the property requestedDispensationNotAvailable', function() {
        expect(instance).to.have.property('requestedDispensationNotAvailable');
        expect(instance.requestedDispensationNotAvailable).to.be("requestedDispensationNotAvailable");
      });

      it('should have the property minimumKitDisabled', function() {
        expect(instance).to.have.property('minimumKitDisabled');
        expect(instance.minimumKitDisabled).to.be("minimumKitDisabled");
      });

      it('should have the property minimumKitNotConfigured', function() {
        expect(instance).to.have.property('minimumKitNotConfigured');
        expect(instance.minimumKitNotConfigured).to.be("minimumKitNotConfigured");
      });

      it('should have the property exception', function() {
        expect(instance).to.have.property('exception');
        expect(instance.exception).to.be("exception");
      });

      it('should have the property onlyServiceAllowed', function() {
        expect(instance).to.have.property('onlyServiceAllowed');
        expect(instance.onlyServiceAllowed).to.be("onlyServiceAllowed");
      });

      it('should have the property loginFailed', function() {
        expect(instance).to.have.property('loginFailed');
        expect(instance.loginFailed).to.be("loginFailed");
      });

      it('should have the property outputTrayOccupied', function() {
        expect(instance).to.have.property('outputTrayOccupied');
        expect(instance.outputTrayOccupied).to.be("outputTrayOccupied");
      });

      it('should have the property dispensedMoreThanRequested', function() {
        expect(instance).to.have.property('dispensedMoreThanRequested');
        expect(instance.dispensedMoreThanRequested).to.be("dispensedMoreThanRequested");
      });

      it('should have the property notFound', function() {
        expect(instance).to.have.property('notFound');
        expect(instance.notFound).to.be("notFound");
      });

    });
  });

}));
