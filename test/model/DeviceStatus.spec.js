/*
 * InLane API
 * InLane communication Web Api
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InLaneApi);
  }
}(this, function(expect, InLaneApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DeviceStatus', function() {
      beforeEach(function() {
        instance = new InLaneApi.DeviceStatus();
      });

      it('should create an instance of DeviceStatus', function() {
        // TODO: update the code to test DeviceStatus
        expect(instance).to.be.a(InLaneApi.DeviceStatus);
      });

      it('should have the property globalStatus (base name: "globalStatus")', function() {
        // TODO: update the code to test the property globalStatus
        expect(instance).to.have.property('globalStatus');
        // expect(instance.globalStatus).to.be(expectedValueLiteral);
      });

      it('should have the property errorCode (base name: "errorCode")', function() {
        // TODO: update the code to test the property errorCode
        expect(instance).to.have.property('errorCode');
        // expect(instance.errorCode).to.be(expectedValueLiteral);
      });

      it('should have the property blockingError (base name: "blockingError")', function() {
        // TODO: update the code to test the property blockingError
        expect(instance).to.have.property('blockingError');
        // expect(instance.blockingError).to.be(expectedValueLiteral);
      });

      it('should have the property inspectionRequired (base name: "inspectionRequired")', function() {
        // TODO: update the code to test the property inspectionRequired
        expect(instance).to.have.property('inspectionRequired');
        // expect(instance.inspectionRequired).to.be(expectedValueLiteral);
      });

      it('should have the property banknotesModuleStatus (base name: "banknotesModuleStatus")', function() {
        // TODO: update the code to test the property banknotesModuleStatus
        expect(instance).to.have.property('banknotesModuleStatus');
        // expect(instance.banknotesModuleStatus).to.be(expectedValueLiteral);
      });

      it('should have the property coinsModuleStatus (base name: "coinsModuleStatus")', function() {
        // TODO: update the code to test the property coinsModuleStatus
        expect(instance).to.have.property('coinsModuleStatus');
        // expect(instance.coinsModuleStatus).to.be(expectedValueLiteral);
      });

      it('should have the property safeDoors (base name: "safeDoors")', function() {
        // TODO: update the code to test the property safeDoors
        expect(instance).to.have.property('safeDoors');
        // expect(instance.safeDoors).to.be(expectedValueLiteral);
      });

      it('should have the property stocksStatus (base name: "stocksStatus")', function() {
        // TODO: update the code to test the property stocksStatus
        expect(instance).to.have.property('stocksStatus');
        // expect(instance.stocksStatus).to.be(expectedValueLiteral);
      });

    });
  });

}));
