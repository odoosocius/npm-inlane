/*
 * InLane API
 * InLane communication Web Api
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CommandFailedResponse} from '../model/CommandFailedResponse';
import {ContentAlert} from '../model/ContentAlert';
import {DeviceContentResponse} from '../model/DeviceContentResponse';
import {DeviceCountingResponse} from '../model/DeviceCountingResponse';
import {ErrorCode} from '../model/ErrorCode';
import {ProblemDetails} from '../model/ProblemDetails';

/**
* Content service.
* @module api/ContentApi
* @version v1
*/
export class ContentApi {

    /**
    * Constructs a new ContentApi. 
    * @alias module:api/ContentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1ContentAlertsGet operation.
     * @callback moduleapi/ContentApi~apiV1ContentAlertsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContentAlert>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve denominations that are under or over existing thresholds.
     * Returns denominations that have an available quantity above the upper threshold or below the lower threshold.  In detail, compare the availability of the device with the configured thresholds.
     * @param {module:api/ContentApi~apiV1ContentAlertsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ContentAlertsGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContentAlert];

      return this.apiClient.callApi(
        '/api/v1/Content/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ContentCountingGet operation.
     * @callback moduleapi/ContentApi~apiV1ContentCountingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceCountingResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all device counting
     * Request to retrieve device all device counting.
     * @param {module:api/ContentApi~apiV1ContentCountingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ContentCountingGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceCountingResponse;

      return this.apiClient.callApi(
        '/api/v1/Content/counting', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ContentGet operation.
     * @callback moduleapi/ContentApi~apiV1ContentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceContentResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the device content by stock
     * Request to retrieve device content by stock
     * @param {module:api/ContentApi~apiV1ContentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ContentGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceContentResponse;

      return this.apiClient.callApi(
        '/api/v1/Content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ContentResetCountingPost operation.
     * @callback moduleapi/ContentApi~apiV1ContentResetCountingPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset the content of a stock
     * POST request to reset the content of the stocks whose index are passed as parameter. Sample request:        POST api/v1/Content/resetCounting      [ 0, 2 ]
     * @param {Array.<Number>} body Indexes of the stocks whose content you would like to reset
     * @param {module:api/ContentApi~apiV1ContentResetCountingPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1ContentResetCountingPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1ContentResetCountingPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/Content/resetCounting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}