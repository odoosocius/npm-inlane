/*
 * InLane API
 * InLane communication Web Api
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CommandFailedResponse} from '../model/CommandFailedResponse';
import {KitDenomination} from '../model/KitDenomination';
import {MinimumKitConfiguration} from '../model/MinimumKitConfiguration';
import {ProblemDetails} from '../model/ProblemDetails';
import {StartOperationResponse} from '../model/StartOperationResponse';
import {StartTransferAllButKitClientReqData} from '../model/StartTransferAllButKitClientReqData';
import {TransferAllButKitOperationStatus} from '../model/TransferAllButKitOperationStatus';

/**
* TransferAllButKit service.
* @module api/TransferAllButKitApi
* @version v1
*/
export class TransferAllButKitApi {

    /**
    * Constructs a new TransferAllButKitApi. 
    * @alias module:api/TransferAllButKitApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1OperationTransferAllButKitCheckUnderThresholdKitDenominationsGet operation.
     * @callback moduleapi/TransferAllButKitApi~apiV1OperationTransferAllButKitCheckUnderThresholdKitDenominationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/KitDenomination>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Function to check if there are some denomination under the minimum kit threshold
     * Function to check if there are some denomination under the minimum kit threshold
     * @param {module:api/TransferAllButKitApi~apiV1OperationTransferAllButKitCheckUnderThresholdKitDenominationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1OperationTransferAllButKitCheckUnderThresholdKitDenominationsGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KitDenomination];

      return this.apiClient.callApi(
        '/api/v1/operation/TransferAllButKit/checkUnderThresholdKitDenominations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1OperationTransferAllButKitConfigurationGet operation.
     * @callback moduleapi/TransferAllButKitApi~apiV1OperationTransferAllButKitConfigurationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MinimumKitConfiguration{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Function to read minimum kit configured
     * Function to read the current minimum kit set on the device
     * @param {module:api/TransferAllButKitApi~apiV1OperationTransferAllButKitConfigurationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1OperationTransferAllButKitConfigurationGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MinimumKitConfiguration;

      return this.apiClient.callApi(
        '/api/v1/operation/TransferAllButKit/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1OperationTransferAllButKitConfigurationPost operation.
     * @callback moduleapi/TransferAllButKitApi~apiV1OperationTransferAllButKitConfigurationPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Function to set the Minimum Kit
     * Function to save a new minimum kit on the device
     * @param {Object} opts Optional parameters
     * @param {module:model/MinimumKitConfiguration} opts.body Object containing the new minimum kit to be saved
     * @param {module:api/TransferAllButKitApi~apiV1OperationTransferAllButKitConfigurationPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1OperationTransferAllButKitConfigurationPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/operation/TransferAllButKit/configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1OperationTransferAllButKitStartPost operation.
     * @callback moduleapi/TransferAllButKitApi~apiV1OperationTransferAllButKitStartPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartOperationResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a new transfer all but kit operation
     * Request to start a new transfer all but minimum kit operation.  This functionality allows to move automatically all the cash exceeding the minimum kit configured on the device to a cassette or a bag (depending on the InLane model).  From the banknotes stocks it is possible to move the banknotes to the cassette or in the bag but only in the InLane Depo models.  From the coins stocks it is possible to move the coins to the bag only in the InLane Depo models.  Example: with InLane 300 it is possible to move only the banknotes to the cassette.
     * @param {module:model/StartTransferAllButKitClientReqData} body Object containing the stock index destination for this transfer all but kit operation
     * @param {Object} opts Optional parameters
     * @param {String} opts.transactionRef Optional text to be linked to the transaction (for example it could be the transaction identifier in the client application or the POS transaction identifier or the ticket identifier)
     * @param {module:api/TransferAllButKitApi~apiV1OperationTransferAllButKitStartPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1OperationTransferAllButKitStartPost(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1OperationTransferAllButKitStartPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'transactionRef': opts['transactionRef']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = StartOperationResponse;

      return this.apiClient.callApi(
        '/api/v1/operation/TransferAllButKit/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1OperationTransferAllButKitStatusGet operation.
     * @callback moduleapi/TransferAllButKitApi~apiV1OperationTransferAllButKitStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferAllButKitOperationStatus{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the status of the transfer all but kit operation
     * Request to retrieve the status of the transfer all but kit operation, once the transfer is started - minimum time between 2 requests 300ms
     * @param {module:api/TransferAllButKitApi~apiV1OperationTransferAllButKitStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1OperationTransferAllButKitStatusGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransferAllButKitOperationStatus;

      return this.apiClient.callApi(
        '/api/v1/operation/TransferAllButKit/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}